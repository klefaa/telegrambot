import os
from io import BytesIO

import requests
import telebot
from PIL import Image, ImageDraw, ImageFont
from dotenv import load_dotenv
from telebot import types

load_dotenv()

bot = telebot.TeleBot(os.getenv('TOKEN_BOT'))


@bot.message_handler(commands=["start"])
def start(m):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    strings = ["–∫–æ—Ç–∏–∫", "—Å–æ–±–∞—á–∫–∞", "–ª–∏—Å–∏—á–∫–∞", "—É—Ç–æ—á–∫–∞", "—Ñ–∏–ª—å–º", "–ø–æ–≥–æ–¥–∞ –ø–µ—Ä–º—å", "–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π (–¥–∞/–Ω–µ—Ç)"]
    for s in strings:
        markup.add(s)
    bot.send_message(m.chat.id,
                     '–ü—Ä–∏–≤–µ—Ç üëã, –º–µ–Ω—è –∑–æ–≤—É—Ç thegreatestbot')

    bot.send_message(m.chat.id,
                     '–Ø –º–æ–≥—É:\n' +
                     '1) –í—ã–¥–∞—Ç—å —Ñ–æ—Ç–æ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–æ—Ç–∏–∫–∞\n' +
                     '2) –í—ã–¥–∞—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ —Å–ª—É—á–∞–π–Ω–æ–π —Å–æ–±–∞—á–∫–∏\n' +
                     '3) –í—ã–¥–∞—Ç—å —Ñ–æ—Ç–æ —Å–ª—É—á–∞–π–Ω–æ–π –ª–∏—Å—ã\n' +
                     '4) –í—ã–¥–∞—Ç—å —Ñ–æ—Ç–æ —Å–ª—É—á–∞–π–Ω–æ–π —É—Ç–∫–∏\n' +
                     '5) –í—ã–¥–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—Ç–æ—Ä–æ–º –µ—Å—Ç—å –Ω–∞ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–µ\n' +
                     '6) –í—ã–¥–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã\n' +
                     '7) –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è –≤–æ–ø—Ä–æ—Å –≥–∏—Ñ–∫–æ–π –î–∞/–ù–µ—Ç\n' +
                     '8) –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ —è –ø—Ä–µ–≤—Ä–∞—â—É –µ–µ –≤ —Ç–µ–∫—Å—Ç',
                     reply_markup=markup)


@bot.message_handler(commands=["cat"])
def cat(m):
    api_url = "https://api.thecatapi.com/v1/images/search"
    response = requests.get(api_url)
    if response.status_code != 200:
        return bot.send_message(m.chat.id, "–ø—Ä–æ—Å—Ç–∏—Ç–µ, —Å–∞–π—Ç–∏–∫ —Å –∫–æ—Ç–∏–∫–∞–º–∏ —É–ø–∞–ª –∏ —Å–ø–∏—Ç—å(")
    data = response.json()
    if not data:
        return bot.send_message(m.chat.id, "–∫–æ—Ç–∏–∫ —Å–ø–∏—Ç—å, –ø–æ—ç—Ç–æ–º—É –æ–Ω –Ω–µ –ø—Ä–∏—à–µ–ª(")
    response = requests.get(data[0]["url"])
    if response.status_code != 200:
        return bot.send_message(m.chat.id, "–∫–æ—Ç–∏–∫ —Å–ø–∏—Ç—å, –ø–æ—ç—Ç–æ–º—É –æ–Ω –Ω–µ –ø—Ä–∏—à–µ–ª(")
    bot.send_photo(m.chat.id, response.content)


def compress_image(image_url, max_size=2 * 1024 * 1024):
    response = requests.get(image_url)
    if response.status_code != 200:
        return None
    data = response.content
    size = len(data)
    if size > max_size:
        img = Image.open(BytesIO(data))
        img.thumbnail((800, 600))
        buffer = BytesIO()
        img.save(buffer, format='JPEG')
        return buffer.getvalue()
    return data


def send_image_or_video(m, url):
    if "mp4" in url:
        response = requests.get(url)
        if response.status_code == 200:
            bot.send_video(m.chat.id, response.content)
    else:
        compressed_image = compress_image(url)
        if compressed_image:
            bot.send_photo(m.chat.id, compressed_image)
        else:
            bot.send_message(m.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")


@bot.message_handler(commands=["dog"])
def dog(m):
    api_url = "https://random.dog/woof.json"
    response = requests.get(api_url)
    if response.status_code != 200:
        return bot.send_message(m.chat.id, "–ø—Ä–æ—Å—Ç–∏—Ç–µ, —Å–∞–π—Ç–∏–∫ —Å –ø–µ—Å–∏–∫–∞–º–∏ —É–ø–∞–ª –∏ —Å–ø–∏—Ç(")
    data = response.json()
    if not data:
        return bot.send_message(m.chat.id, "–ø–µ—Å–∏–∫ —Å–ø–∏—Ç, –ø–æ—ç—Ç–æ–º—É –æ–Ω –Ω–µ –ø—Ä–∏—à–µ–ª(")
    send_image_or_video(m, data["url"])

@bot.message_handler(commands=["film"])
def film(m):
    header = {
        "X-API-KEY": os.getenv('TOKEN_FILM')
    }
    response = requests.get("https://api.kinopoisk.dev/v1.3/movie/random", headers=header)

    if response.status_code != 200:
        return bot.send_message(m.chat.id, "–ø—Ä–æ—Å—Ç–∏—Ç–µ, —Å–∞–π—Ç–∏–∫ —Å —Ñ–∏–ª—å–º–∞–º–∏ —É–ø–∞–ª(")

    data = response.json()

    if not data:
        return bot.send_message(m.chat.id, "—Ñ–∏–ª—å–º—ã —É–º–µ—Ä–ª–∏")

    name = data["name"]
    description = data.get("description", "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    rating_kp = data["rating"].get("kp", "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    rating_imdb = data["rating"].get("imdb", "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    genres = ", ".join([i["name"] for i in data.get("genres", [])])
    try:
        trailers = "\n".join([i["url"] for i in data["videos"].get("trailers", [])])
    except Exception:
        trailers = "–Ω–µ—Ç—é"
    poster_url = data["poster"]["url"]

    bot.send_photo(m.chat.id, poster_url, caption=f"""
–ù–∞–∑–≤–∞–Ω–∏–µ: {name}

–û–ø–∏—Å–∞–Ω–∏–µ: {description}

–†–µ–π—Ç–∏–Ω–≥ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞: {rating_kp}
–†–µ–π—Ç–∏–Ω–≥ IMDB: {rating_imdb}
–ñ–∞–Ω—Ä—ã: {genres}
–¢—Ä–µ–π–ª–µ—Ä—ã: 
{trailers}
    """)


@bot.message_handler(commands=["description"])
def description(m, res=False):
    bot.send_message(m.chat.id, """
    –ë–æ—Ç —Å–æ–∑–¥–∞–Ω –ö–æ–∫–æ—É–ª–∏–Ω–æ–π –ú–∞—Ä–∏–Ω–æ–π –≤ –Ω–µ–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö —Ü–µ–ª—è—Ö
    """)


def edit_num(n):
    return int(n * 10) / 10


@bot.message_handler(commands=["weather"])
def weather(message):
    try:
        city = message.text.split(" ", 1)[1]
        api_url = "http://api.openweathermap.org/geo/1.0/direct?q=" + city + "&appid=" + os.getenv('TOKEN_OPENWEATHER')
        response = requests.get(api_url)
        if response.status_code != 200:
            return bot.send_message(message.chat.id, "–ø—Ä–æ—Å—Ç–∏—Ç–µ, —Å–∞–π—Ç–∏–∫ —Å –ø–æ–≥–æ–¥–æ–π —É—Å—Ç–∞–ª—å")
        response = response.json()
        lat = response[0]["lat"]
        lon = response[0]["lon"]
        api_url = f"https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&" \
                  f"appid={os.getenv('TOKEN_OPENWEATHER')}&cnt=1"
        response = requests.get(api_url)
        if response.status_code != 200:
            return bot.send_message(message.chat.id, "–ø—Ä–æ—Å—Ç–∏—Ç–µ, —Å–∞–π—Ç–∏–∫ —Å –ø–æ–≥–æ–¥–æ–π —É—Å—Ç–∞–ª—å")
        response = response.json()
        temp = edit_num(response["main"]["temp"] - 273.15)
        feels_like = edit_num(response["main"]["feels_like"] - 273.15)
        min_temp = edit_num(response["main"]["temp_min"] - 273.15)
        max_temp = edit_num(response["main"]["temp_max"] - 273.15)
        wind_speed = edit_num(response["wind"]["speed"])
        if temp < -20:
            ans = "—Å–∏–¥–∏–º –¥–æ–º–∞, —Ç–∞–º —Ö–æ–ª–æ–¥–Ω–æ –∏ —Å—Ç—Ä–∞—à–Ω–æ("
        elif temp < 0:
            ans = "—Ö–æ–ª–æ–¥–Ω–æ –Ω–æ –Ω–µ–æ—á–µ–Ω—å.."
        elif temp < 10:
            ans = "–Ω–∞ —É–ª–∏—Ü–µ –ø—Ä–æ—Ö–ª–∞–¥–Ω–æ"
        elif temp < 20:
            ans = "–Ω–∞ —É–ª–∏—Ü–µ –Ω–æ—Ä–º–∏–∫ –ø–æ–≥–æ–¥–∞"
        elif temp < 30:
            ans = "–≥–¥–µ –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä?"
        else:
            ans = "–ø–µ—Ä–µ–µ–∑–∂–∞–µ–º –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫"
        bot.send_message(message.chat.id, f"""
    {ans}
—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å–µ–π—á–∞—Å: {temp}
–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels_like}
–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {min_temp}
–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {max_temp}
—Å–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed}
        """)
    except Exception:
        bot.send_message(message.chat.id, f"–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≥–æ—Ä–æ–¥")


@bot.message_handler(commands=["help"])
def description(m, res=False):
    bot.send_message(m.chat.id, """
–ú–∞–∫–∞—Ä–æ–Ω–∏ –±–æ—Ç —É–º–µ–µ—Ç:
/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
/description - –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞
/cat - —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–æ—Ç–∏–∫–∞
/dog - —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å–ª—É—á–∞–π–Ω–æ–π —Å–æ–±–∞—á–∫–∏
/fox - —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –ª–∏—Å—ã
/duck - —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å–ª—É—á–∞–π–Ω–æ–π —É—Ç–∫–∏
/film - —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º
/weather "–Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞" - –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ 
/yesno - –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–∞/–Ω–µ—Ç
""")


@bot.message_handler(commands=["yesno"])
def joke(message):
    response = requests.get("https://yesno.wtf/api")
    if response.status_code != 200:
        return bot.send_message(message.chat.id, "–∫–æ–Ω—á–∏–ª–∏—Å—å —Ö–∏—Ö–∞–Ω—å–∫–∏ —Ö–∞—Ö–∞–Ω—å–∫–∏")
    gif_response = requests.get(response.json()["image"])
    if gif_response.status_code != 200:
        return bot.send_message(message.chat.id, "–∫–æ–Ω—á–∏–ª–∏—Å—å —Ö–∏—Ö–∞–Ω—å–∫–∏ —Ö–∞—Ö–∞–Ω—å–∫–∏")
    bot.send_document(message.chat.id, ("gif.gif", gif_response.content))


@bot.message_handler(commands=["fox"])
def fox(message):
    response = requests.get("https://randomfox.ca/floof/")
    if response.status_code != 200:
        return bot.send_message(message.chat.id, "–∫–æ–Ω—á–∏–ª–∏—Å—å –ª–∏—Å–∏—á–∫–∏ —Å–µ—Å—Ç—Ä–∏—á–∫–∏")
    response = requests.get(response.json()["image"])
    if response.status_code != 200:
        return bot.send_message(message.chat.id, "–∫–æ–Ω—á–∏–ª–∏—Å—å –ª–∏—Å–∏—á–∫–∏ —Å–µ—Å—Ç—Ä–∏—á–∫–∏")
    bot.send_photo(message.chat.id, response.content)


@bot.message_handler(commands=["duck"])
def duck(message):
    response = requests.get("https://random-d.uk/api/random")
    if response.status_code != 200:
        return bot.send_message(message.chat.id, "–∫–æ–Ω—á–∏–ª–∏—Å—å —É—Ç–æ—á–∫–∏")
    response = requests.get(response.json()["url"])
    if response.status_code != 200:
        return bot.send_message(message.chat.id, "–∫–æ–Ω—á–∏–ª–∏—Å—å —É—Ç–æ—á–∫–∏")
    bot.send_photo(message.chat.id, response.content)


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
# send_gif(message, bot)


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —é–∑–µ—Ä–∞
@bot.message_handler(content_types=["text"])
def handle_text(message):
    answer = "–ò—Å–ø–æ–ª—å–∑—É–π –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ /help –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –∫–∞—Ä—Ç–∏–Ω–∫—É"
    if message.text.strip().lower() == "–∫–æ—Ç–∏–∫":
        cat(message)
        return
    elif message.text.strip().lower() == "—Ñ–∏–ª—å–º":
        film(message)
        return
    elif message.text.strip().lower() == "—Å–æ–±–∞—á–∫–∞":
        dog(message)
        return
    elif message.text.strip().lower() == "–ª–∏—Å–∏—á–∫–∞":
        fox(message)
        return
    elif message.text.strip().lower() == "—É—Ç–æ—á–∫–∞":
        duck(message)
        return
    elif message.text.strip().lower() == "–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π (–¥–∞/–Ω–µ—Ç)":
        joke(message)
        return
    elif message.text.strip().lower().find("–ø–æ–≥–æ–¥–∞ ") == 0:
        weather(message)
        return
    bot.send_message(message.chat.id, answer)


@bot.message_handler(content_types=["document"])
def handle_document(message):
    if message.document.mime_type.startswith('image'):
        file_info = bot.get_file(message.document.file_id)
        file = bot.download_file(file_info.file_path)

        image = Image.open(BytesIO(file))

        if 'exif' in image.info:
            exif = image.info['exif']
            image = Image.open(BytesIO(file))
            image = image.rotate(0, expand=True)
            image = Image.open(BytesIO(file))
            image = image.rotate(90, expand=True)
            image = Image.open(BytesIO(file))
            image = image.rotate(180, expand=True)
            image = Image.open(BytesIO(file))
            image = image.rotate(270, expand=True)

        new_width = image.width // 2
        new_height = image.height // 2
        image = image.resize((new_width, new_height))

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ ASCII-–∞—Ä—Ç
        ascii_image = img_redactor(image)
        ascii_image.save("ascii_art.png", "PNG")
        with open("ascii_art.png", "rb") as doc_file:
            bot.send_document(message.chat.id, doc_file)
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ñ–∞–π–ª–∞.")


@bot.message_handler(content_types=["photo"])
def handle_photo(message):
    photo = message.photo[-1]
    file_info = bot.get_file(photo.file_id)
    file = bot.download_file(file_info.file_path)
    image = Image.open(BytesIO(file))
    ascii_image = img_redactor(image)
    ascii_image.save("ascii_art.png", "PNG")
    with open("ascii_art.png", "rb") as doc_file:
        bot.send_document(message.chat.id, doc_file)
        bot.send_photo(message.chat.id, ascii_image)


def img_redactor(image):
    def pixel_to_ascii(pixel):
        grayscale = 0.2126 * pixel[0] + 0.7152 * pixel[1] + 0.0722 * pixel[2]
        index = int((grayscale / 255) * (len(ASCII_CHARS) - 1))
        return ASCII_CHARS[index]

    ASCII_CHARS = ".:!/r(l1Z4H9W8$@"
    ORIGINAL_WIDTH, ORIGINAL_HEIGHT = image.size

    new_width = ORIGINAL_WIDTH // 4
    new_height = ORIGINAL_HEIGHT // 4

    resized_image = image.resize((new_width, new_height))

    ascii_text = ""
    char_width = 8
    char_height = 8

    for i in range(new_height):
        for j in range(new_width):
            pixel = resized_image.getpixel((j, i))
            ascii_text += pixel_to_ascii(pixel)
        ascii_text += "\n"

    image_width = char_width * len(ascii_text.split('\n')[0])
    image_height = char_height * len(ascii_text.split('\n'))

    ascii_image = Image.new('RGB', (image_width, image_height), (0, 0, 0))
    draw = ImageDraw.Draw(ascii_image)
    font = ImageFont.load_default()

    lines = ascii_text.split('\n')
    for i, line in enumerate(lines):
        for j, char in enumerate(line):
            draw.text((j * char_width, i * char_height), char, (255, 255, 255), font=font)

    return ascii_image


if __name__ == "__main__":
    bot.polling(none_stop=True, interval=0)
